USE `soft_uni`;

-- task 01
DROP PROCEDURE IF EXISTS `usp_get_employees_salary_above_35000`;

DELIMITER $$

CREATE PROCEDURE `usp_get_employees_salary_above_35000`()
BEGIN
SELECT 
    `first_name`, `last_name`
FROM
    `employees`
WHERE
    `salary` > 35000
ORDER BY `first_name` , `last_name` , `employee_id`;
END $$

DELIMITER ;

CALL `usp_get_employees_salary_above_35000`();

-- task 02
DROP PROCEDURE IF EXISTS `usp_get_employees_salary_above`;

DELIMITER $$

CREATE PROCEDURE `usp_get_employees_salary_above`(IN `salary_above` DOUBLE)
BEGIN
SELECT 
    `first_name`, `last_name`
FROM
    `employees`
WHERE
    `salary` >= `salary_above`
ORDER BY `first_name` , `last_name` , `employee_id`;
END $$

DELIMITER ;

CALL `usp_get_employees_salary_above`(99999.99);

-- task 03
DROP PROCEDURE IF EXISTS `usp_get_towns_starting_with`;

DELIMITER $$

CREATE PROCEDURE `usp_get_towns_starting_with`(IN `starting_string` VARCHAR(50))
BEGIN
SELECT 
    `name` AS `town_name`
FROM
    `towns`
WHERE
    `name` LIKE (CONCAT(`starting_string`,'%'))
ORDER BY `name`;
END $$

DELIMITER ;

CALL `usp_get_towns_starting_with`('S');

-- task 04
DROP PROCEDURE IF EXISTS `usp_get_employees_from_town`;

DELIMITER $$

CREATE PROCEDURE `usp_get_employees_from_town`(`town_name` VARCHAR(50))
BEGIN
SELECT 
    `e`.`first_name`, `e`.`last_name`
FROM
    `employees` AS `e`
        JOIN
    `addresses` AS `a` ON `e`.`address_id` = `a`.`address_id`
        JOIN
    `towns` AS `t` ON `a`.`town_id` = `t`.`town_id`
WHERE
    `t`.`name` = `town_name`
ORDER BY `e`.`first_name` , `e`.`last_name` , `e`.`employee_id`;
END $$

DELIMITER ;

CALL `usp_get_employees_from_town`('Sofia');

-- task 05
DROP FUNCTION IF EXISTS `ufn_get_salary_level`;

DELIMITER $$

CREATE FUNCTION `ufn_get_salary_level`(`employee_salary` DECIMAL)
RETURNS VARCHAR(10)
BEGIN
DECLARE `salary_Level` VARCHAR(10);
IF `employee_salary`<30000 THEN
SET `salary_Level` := 'Low';
ELSEIF `employee_salary`>50000 THEN
SET `salary_Level` := 'High';
ELSE 
SET `salary_Level` = 'Average';
END IF;
RETURN `salary_Level`;
END $$

DELIMITER ;

SELECT 
    UFN_GET_SALARY_LEVEL(448994.58) AS `salary_level`
FROM
    `employees`
LIMIT 1;

-- task 06
DROP PROCEDURE IF EXISTS `usp_get_employees_by_salary_level`;

DELIMITER $$

CREATE PROCEDURE `usp_get_employees_by_salary_level`(`employee_salary` VARCHAR(10))
BEGIN
DECLARE `salary_min` DECIMAL (13,4);
DECLARE `salary_max` DECIMAL (13,4);
IF `employee_salary`='Low' THEN
SET `salary_min` = 0;
SET `salary_max` = 30000;
ELSEIF `employee_salary`='Average' THEN
SET `salary_min` = 29999.9999;
SET `salary_max` = 50000.0001;
ELSEIF `employee_salary`='High' THEN
SET `salary_min` = 50000;
SET `salary_max` = 999999999;
END IF;

SELECT 
    `first_name`, `last_name`
FROM
    `employees`
WHERE
    `salary` > `salary_min`
        AND `salary` < `salary_max`
ORDER BY `first_name` DESC , `last_name` DESC;

END $$

DELIMITER ;

CALL `usp_get_employees_by_salary_level`('High');

-- task 07
DROP FUNCTION IF EXISTS `ufn_is_word_comprised`;

DELIMITER $$

CREATE FUNCTION `ufn_is_word_comprised`(`set_of_letters` VARCHAR(50), `word` VARCHAR(50))
RETURNS BIT
BEGIN
RETURN `word` REGEXP (CONCAT('^[', `set_of_letters`, ']+$'));
END $$

DELIMITER ;

SELECT UFN_IS_WORD_COMPRISED('oistmiahf', 'Sofia');

-- task 08.1
SET foreign_key_checks = 0;

DELETE `d` , `e` FROM `employees` AS `e`
        JOIN
    `departments` AS `d` ON `e`.`department_id` = `d`.`department_id` 
WHERE
    `d`.`name` IN ('Production' , 'Production Control');
    
SET foreign_key_checks = 1;

        

-- task 08
DROP PROCEDURE IF EXISTS `usp_get_holders_full_name`;

DELIMITER $$

CREATE PROCEDURE `usp_get_holders_full_name`()
BEGIN
SELECT 
    CONCAT(`first_name`, ' ', `last_name`) AS `full_name`
FROM
    `account_holders`
ORDER BY `full_name` , `id`;
END $$

DELIMITER ;

CALL `usp_get_holders_full_name`;

-- task 09
DROP PROCEDURE IF EXISTS `usp_get_holders_with_balance_higher_than`;

DELIMITER $$

CREATE PROCEDURE `usp_get_holders_with_balance_higher_than`(`balance_parameter` DECIMAL (13,4))
BEGIN
SELECT 
    `ah`.`first_name`, `ah`.`last_name`
FROM
    `account_holders` AS `ah`
        JOIN
    `accounts` AS `a` ON `ah`.`id` = `a`.`account_holder_id`
GROUP BY `ah`.`id`
HAVING SUM(`a`.`balance`) >= `balance_parameter`
ORDER BY  `a`.`id`, `ah`.`first_name` DESC, `ah`.`last_name`;
END $$

DELIMITER ;

CALL `usp_get_holders_with_balance_higher_than`(7000);

-- task 10
DROP FUNCTION IF EXISTS `ufn_calculate_future_value`;

DELIMITER $$

CREATE FUNCTION `ufn_calculate_future_value`(`initial_sum` DECIMAL (13,4), 
`yearly_interest_rate` DECIMAL (13,4), `number_of_years` INT)
RETURNS DOUBLE(13,2)
BEGIN
RETURN `initial_sum` * POW(1+`yearly_interest_rate`,`number_of_years`)*100/100;
END $$

DELIMITER ;

SELECT UFN_CALCULATE_FUTURE_VALUE(1000, 0.10, 5);

-- task 11
DROP FUNCTION IF EXISTS `ufn_calculate_future_value`;
DROP PROCEDURE IF EXISTS `usp_calculate_future_value_for_account`;

DELIMITER $$

CREATE FUNCTION `ufn_calculate_future_value`(`initial_sum` DECIMAL (13,4), 
`yearly_interest_rate` DECIMAL (13,4), `number_of_years` INT)
RETURNS DECIMAL(13,4)
BEGIN
RETURN `initial_sum` * POW(1+`yearly_interest_rate`,`number_of_years`);
END $$

CREATE PROCEDURE `usp_calculate_future_value_for_account`(`account_id` INT, 
`yearly_interest_rate` DECIMAL (13,4))
BEGIN
SELECT 
    `a`.`id`,
    `ah`.`first_name`,
    `ah`.`last_name`,
    `a`.`balance` AS `current_balance`,
    UFN_CALCULATE_FUTURE_VALUE(`a`.`balance`,
            `yearly_interest_rate`,
            5) AS `balance_in_5_years`
FROM
    `account_holders` AS `ah`
        JOIN
    `accounts` AS `a` ON `ah`.`id` = `a`.`account_holder_id`
WHERE `a`.`id` = `account_id`;
END $$

DELIMITER ;

CALL `usp_calculate_future_value_for_account`(1, 0.10);

-- task 12
DROP PROCEDURE IF EXISTS `usp_deposit_money`;

DELIMITER $$

CREATE PROCEDURE `usp_deposit_money`(`account_id` INT, 
`money_amount` DECIMAL (13,4))
BEGIN 
START TRANSACTION;
IF (`money_amount` <0 ) THEN
ROLLBACK;
ELSE
UPDATE `accounts`
SET `balance` = `balance` + `money_amount`
WHERE
    `id` = `account_id`;	
END IF;
END $$

DELIMITER ;

CALL `usp_deposit_money`(1, 10);

-- task 13
DROP PROCEDURE IF EXISTS `usp_withdraw_money`;

DELIMITER $$

CREATE PROCEDURE `usp_withdraw_money`(`account_id` INT, 
`money_amount` DECIMAL (13,4))
BEGIN 
START TRANSACTION;
IF ((SELECT `balance` FROM  `accounts` WHERE `id` = `account_id`)-`money_amount`< 0 OR 
`money_amount` <0 ) THEN
ROLLBACK;
ELSE
UPDATE `accounts`
SET `balance` = `balance` - `money_amount`
WHERE
    `id` = `account_id`;	
END IF;
END $$

DELIMITER ;

CALL `usp_withdraw_money`(1, 10);

-- task 14
DROP PROCEDURE IF EXISTS `usp_transfer_money`;

DELIMITER $$

CREATE PROCEDURE `usp_transfer_money`(`from_account_id` INT, `to_account_id` INT,
`amount` DECIMAL (13,4))
BEGIN 
START TRANSACTION;
IF (`amount` <0
 OR `from_account_id` = `to_account_id`
 OR (SELECT `id` FROM `accounts` WHERE `id` = `from_account_id`) IS NULL
 OR (SELECT `id` FROM `accounts` WHERE `id` = `to_account_id`) IS NULL
 OR (SELECT `balance` FROM  `accounts` WHERE `id` = `from_account_id`)-`amount`< 0) THEN
ROLLBACK;
ELSE
UPDATE `accounts`
SET `balance` = `balance` - `amount`
WHERE
    `id` = `from_account_id`;	
UPDATE `accounts`
SET `balance` = `balance` + `amount`
WHERE
    `id` = `to_account_id`;	    
END IF;
END $$

DELIMITER ;

CALL `usp_transfer_money`(1,2, 10);

-- task 15
CREATE TABLE IF NOT EXISTS `logs` (
    `log_id` INT PRIMARY KEY AUTO_INCREMENT,
    `account_id` INT,
    `old_sum` DECIMAL(19,4),
    `new_sum` DECIMAL(19,4)
);

TRUNCATE TABLE `logs`;

DROP TRIGGER IF EXISTS `tr_sum_change`;

DELIMITER $$

CREATE TRIGGER `tr_sum_change`
AFTER UPDATE ON `accounts`
FOR EACH ROW
BEGIN
INSERT INTO `logs`( `account_id`,`old_sum`,`new_sum`)
 VALUES (`OLD`.`id`,`OLD`.`balance`,`NEW`.`balance`);
END $$

DELIMITER ;

-- task 16
CREATE TABLE IF NOT EXISTS `notification_emails` (
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `recipient` INT,
    `subject` TEXT,
    `body` TEXT
);

TRUNCATE TABLE `notification_emails`;

DROP TRIGGER IF EXISTS `tr_logs_change_email`;

DELIMITER $$

CREATE TRIGGER `tr_logs_change_email`
AFTER INSERT ON `logs`
FOR EACH ROW
BEGIN
INSERT `notification_emails`( `recipient`,`subject`,`body`)
 VALUES (`NEW`.`account_id`,CONCAT_WS(' ','Balance change for account:', `NEW`.`account_id`),
 CONCAT_WS(' ','On',DATE_FORMAT(NOW(), '%b %d %Y at %r'),'your balance was changed from',`NEW`.`old_sum`,'to',`NEW`.`new_sum`,'.'));
END $$

DELIMITER ;
