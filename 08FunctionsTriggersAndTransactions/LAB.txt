USE `soft_uni`;

-- task 01
DROP FUNCTION IF EXISTS `ufn_count_employees_by_town`;

DELIMITER $$

CREATE FUNCTION `ufn_count_employees_by_town`(`town_name` VARCHAR (50)) 
RETURNS INT
BEGIN 
DECLARE `employees_count` INT;

SET `employees_count` :=(SELECT 
    COUNT(`e`.`employee_id`) AS `count`
FROM
    `employees` AS `e`
        JOIN
    `addresses` AS `a` ON `e`.`address_id` = `a`.`address_id`
        JOIN
    `towns` AS `t` ON `a`.`town_id` = `t`.`town_id`
WHERE
    `t`.`name` = `town_name`);

RETURN `employees_count`;	
END $$

DELIMITER ;

SELECT 
    UFN_COUNT_EMPLOYEES_BY_TOWN('Sofia') AS `count`
FROM
    `employees`
LIMIT 1;

-- task 02
DROP PROCEDURE IF EXISTS `usp_raise_salaries`;

DELIMITER $$

CREATE PROCEDURE `usp_raise_salaries`(`department_name` VARCHAR (50)) 
BEGIN 
UPDATE `employees` AS `e`
        JOIN
    `departments` AS `d` ON `e`.`department_id` = `d`.`department_id`
SET `e`.`salary` = `e`.`salary` * 1.05
WHERE
    `d`.`name` = `department_name`;	
END $$

DELIMITER ;

CALL `usp_raise_salaries`('Finance2');

-- task 03
DROP PROCEDURE IF EXISTS `usp_raise_salary_by_id`;

DELIMITER $$

CREATE PROCEDURE `usp_raise_salary_by_id`(`id` INT) 
BEGIN 
UPDATE `employees`
SET `salary` = `salary` * 1.05
WHERE
    `employee_id` = `id`;	
END $$

DELIMITER ;

CALL `usp_raise_salary_by_id`(300);

-- task 04
CREATE TABLE IF NOT EXISTS `deleted_employees` (
    `employee_id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(20),
    `last_name` VARCHAR(20),
    `middle_name` VARCHAR(20),
    `job_title` VARCHAR(50),
    `department_id` INT,
    `salary` DOUBLE
);

TRUNCATE TABLE `deleted_employees`;

DROP TRIGGER IF EXISTS `tr_delete_employees`;

DELIMITER $$

CREATE TRIGGER `tr_delete_employees`
AFTER DELETE ON `employees`
FOR EACH ROW
BEGIN
INSERT INTO `deleted_employees`( `first_name`,
`last_name`,`middle_name`, `job_title`,`department_id`,`salary`)
 VALUES (`OLD`.`first_name`,`OLD`.`last_name`,`OLD`.`middle_name`,
 `OLD`.`job_title`,`OLD`.`department_id`,`OLD`.`salary`);
END $$

DELIMITER ;