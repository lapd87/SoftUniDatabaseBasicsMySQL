USE `gringotts`;

-- task 01
SELECT 
    COUNT(`id`) AS 'count'
FROM
    `wizzard_deposits`;
    
-- task 02
SELECT 
    MAX(`magic_wand_size`) AS 'longest_magic_wand'
FROM
    `wizzard_deposits`;  
    
-- task 03
SELECT 
    `deposit_group`,
    MAX(`magic_wand_size`) AS 'longest_magic_wand'
FROM
    `wizzard_deposits`
GROUP BY `deposit_group`
ORDER BY `longest_magic_wand` , `deposit_group`;

-- task 04
SELECT 
    `deposit_group`
FROM
    `wizzard_deposits`
GROUP BY `deposit_group`
HAVING (SELECT 
        AVG(`magic_wand_size`) AS 'lowest'
    FROM
        `wizzard_deposits`
    GROUP BY `deposit_group`
    ORDER BY `lowest`
    LIMIT 1) = AVG(`magic_wand_size`);
    
-- task 05
SELECT 
    `deposit_group`, SUM(`deposit_amount`) AS 'total_sum'
FROM
    `wizzard_deposits`
GROUP BY `deposit_group`
ORDER BY `total_sum`;

-- task 06
SELECT 
    `deposit_group`, SUM(`deposit_amount`) AS 'total_sum'
FROM
    `wizzard_deposits`
WHERE
    `magic_wand_creator` = 'Ollivander family'
GROUP BY `deposit_group`
ORDER BY `deposit_group`;

-- task 07
SELECT 
    `deposit_group`,
    SUM(`deposit_amount`) AS 'total_sum'
FROM
    `wizzard_deposits`
WHERE
    `magic_wand_creator` = 'Ollivander family'
GROUP BY `deposit_group`
HAVING `total_sum` < 150000
ORDER BY `total_sum` DESC;

-- task 08
SELECT 
    `deposit_group`,
    `magic_wand_creator`,
    MIN(`deposit_charge`) AS 'min_deposit_charge'
FROM
    `wizzard_deposits`
GROUP BY `deposit_group` , `magic_wand_creator`
ORDER BY `magic_wand_creator` , `deposit_group`;

-- task 09
SELECT 
    CASE
        WHEN `age` < 11 THEN '[0-10]'
        WHEN `age` < 21 THEN '[11-20]'
        WHEN `age` < 31 THEN '[21-30]'
        WHEN `age` < 41 THEN '[31-40]'
        WHEN `age` < 51 THEN '[41-50]'
        WHEN `age` < 61 THEN '[51-60]'
        WHEN `age` >= 61 THEN '[61+]'
    END AS 'age_group',
    COUNT(`age`) AS 'wizard_count'
FROM
    `wizzard_deposits`
GROUP BY `age_group`
ORDER BY `wizard_count`;

-- task 10
SELECT 
    LEFT(`first_name`, 1) AS 'first_letter'
FROM
    `wizzard_deposits`
WHERE
    `deposit_group` = 'Troll Chest'
GROUP BY `first_letter`
ORDER BY `first_letter`;

-- task 11
SELECT 
    `deposit_group`,
    `is_deposit_expired`,
    AVG(`deposit_interest`) AS 'average_interest'
FROM
    `wizzard_deposits`
WHERE
    `deposit_start_date` > '1985-01-01'
GROUP BY `deposit_group` , `is_deposit_expired`
ORDER BY `deposit_group` DESC , `is_deposit_expired`;

-- task 12
SELECT 
    ((SELECT 
            `deposit_amount`
        FROM
            `wizzard_deposits`
        LIMIT 1) - (SELECT 
            `deposit_amount`
        FROM
            `wizzard_deposits`
        ORDER BY `id` DESC
        LIMIT 1)) AS `sum_difference`;
        
-- task 13
USE `soft_uni`;

SELECT 
    `department_id`, MIN(`salary`) AS `minimum_salary`
FROM
    `employees`
WHERE
    `hire_date` > '01/01/2000'
        AND `department_id` IN (2 , 5, 7)
GROUP BY `department_id`
ORDER BY `department_id`;

-- task 14
CREATE TABLE IF NOT EXISTS `new_table` AS (SELECT * FROM
    `employees`
WHERE
    `salary` > 30000);
    
    DELETE FROM `new_table` 
WHERE
    `manager_id` = 42;
    
    UPDATE `new_table` 
SET 
    `salary` = `salary` + 5000
WHERE
    `department_id` = 1;
    
    SELECT 
    `department_id`, AVG(`salary`) AS `avg_salary`
FROM
    `new_table`
GROUP BY `department_id`
ORDER BY `department_id`;

-- task 15
SELECT 
    `department_id`, MAX(`salary`) AS `max_salary`
FROM
    `employees`
GROUP BY `department_id`
HAVING `max_salary` NOT BETWEEN 30000 AND 70000
ORDER BY `department_id`;

-- task 16
SELECT 
    COUNT(`salary`)
FROM
    `employees`
WHERE
    `manager_id` IS NULL;
    
-- task 17
SELECT 
    `department_id`,
    (SELECT DISTINCT
            `e2`.`salary`
        FROM
            `employees` AS `e2`
        WHERE
            `e2`.`department_id` = `e1`.`department_id`
        ORDER BY `e2`.`salary` DESC
        LIMIT 2 , 1) AS `third_highest_salary`
FROM
    `employees` AS `e1`
GROUP BY `department_id`
HAVING `third_highest_salary` IS NOT NULL;

-- task 18
SELECT 
    `e1`.`first_name`, `e1`.`last_name`, `e1`.`department_id`
FROM
    `employees` AS `e1`
WHERE
    `e1`.`salary` > (SELECT 
            AVG(`e2`.`salary`)
        FROM
            `employees` AS `e2`
        WHERE
            `e2`.`department_id` = `e1`.`department_id`)
ORDER BY `e1`.`department_id` , `e1`.`employee_id`
LIMIT 10;

-- task 19
SELECT 
    `department_id`, SUM(`salary`) AS `total_salary`
FROM
    `employees`
GROUP BY `department_id`
ORDER BY `department_id`;
                
     